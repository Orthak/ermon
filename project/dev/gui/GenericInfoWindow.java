/*
 * Proyect:     ERMON.
 * File:        GenericInfoWindow.java
 * Description: Implements a Generic Information Window -a window where
 *              different types of information are printed depends on the
 *              user selection -.
 * Java:        JDK 7
 * Contact:     Alberto Martin Cajal <amartin.glimpse23@gmail.com>
 * Website:     https://github.com/amcajal/ermon
 * Copyrigth:   GNU General Public License, version 3.0.
 *
 * ERMON is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ERMON is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ERMON.  If not, see <http://www.gnu.org/licenses/>.
*/

package gui;

/* Graphic operations. */
import java.awt.Color;
import javax.swing.JFileChooser;

/* Exception handling. */
import java.io.FileNotFoundException;
import java.io.IOException;

import java.util.ArrayList;    /* To use array list data structures.*/
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

/* Establish information to be shown. */
import src.ConfigLoader; 
import src.Event;
import src.Flags;
import src.FileWorker;

/**
 * Implements a Generic Information Window.
 *
 * A generic information window allows the user to query miscellaneous data
 * about the application and related elements (the typical 'about' section).
*/
public class GenericInfoWindow extends javax.swing.JFrame { 
    
    /*
     * CAPTION:
     * SXE = Single eXecution Event.
     * PXE = Periodical eXecution Event.
    */
    
    /* CLASS VARIABLES */
    
    /**
     * List of PXE already loaded in the application.
     * 
     * This list references the "periodExecutionEventList" array 
     * inside EventClock class.
    */
    ArrayList<Event> loadedPXE;
    
    /**
     * List of SXE already loaded in the application.
     * 
     * This list references the "singleExecutionEventList" array 
     * inside EventClock class.
    */
    ArrayList<Event> loadedSXE;
    
    /* CONSTRUCTORS */

    /**
     * Default constructor.
     * 
    */
    public GenericInfoWindow() {
        initComponents();
    }
    
    /**
     * Initializes GenericInfoWindow with the data of current loaded events.
     * 
     * It receives as parameters the SXE and the PXE already loaded in the
     * application (the ones being scheduled and deployed), directly
     * from the EventClock class.
     * 
     * @param PXE Periodical Execution Events list retreived from EventClock.
     * @param SXE Single Execution Events list retreived from EventClock.
    */
    public GenericInfoWindow(ArrayList<Event> PXE, ArrayList<Event> SXE) {
        initComponents();
        
        /* Keep reference to the received parameteres using the local arrays. */
        this.loadedPXE = PXE;
        this.loadedSXE = SXE;
    }

    /* METHODS */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox2 = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        comboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        Show = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Information window");
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setRows(5);
	descriptionTextArea.setCaretPosition(0);
        jScrollPane1.setViewportView(descriptionTextArea);
	jScrollPane1.getVerticalScrollBar().setValue(0);

        Show.setText("Show");
        Show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Show)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 197, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Show))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Loads into the window the data to be shown.
     * 
     * Depends on the user selection, different textual information can be shown
     * in the window:
     * - If user pressed About button, 'about' information can be checked.
     * - If user pressed Habits button, available events information are show.
     * 
     * @param infoType type of information to be shown.
    */
    public void loadData (Flags.InformationType infoType) {
        if (infoType == Flags.InformationType.ABOUT) {
            /*
             * Loads in the combo box the elements available in "About" mode.
            */
            comboBox.addItem("Ermon");    /* Information about the tool. */
            comboBox.addItem("Official Blog");    /* Information about blog. */
            comboBox.addItem("GitHub");    /* Information about GitHub. */

            /*
             * Information about the research performed to create default
             * set of events.
             */
            comboBox.addItem("Research");
        }
        else {    /* infoType == Flags.Information.EVENTS */
            comboBox.addItem("Current events");    /* Current loaded events. */
            comboBox.addItem("Default events");    /* Default events info. */
            comboBox.addItem("Custom events");    /* Custom events info. */ 
        }
    }

    /**
     * Executes operations controled by 'Show' button.
     *
     * Prints in the text area the information related to the selected element
     * in the combo box. Information is retreived from the default list of
     * events, from a valid configuration file -when custom events are shown-,
     * and from the text files from 'media' package.
     *
     * @param evt the pressing of the button.
    */
    private void ShowActionPerformed(java.awt.event.ActionEvent evt) {    /* GEN-FIRST:event_ShowActionPerformed.*/
        
        FileWorker fileReader = new FileWorker();    /* Read media text files.*/
        String dataToPrint = "";

        descriptionTextArea.setText("");    /* Clean text area before. */

        /*
         * Check the selected item in the combo box.
         * Dependes on the selected item, prints the related information
        */
        if (comboBox.getSelectedItem().equals("Ermon")) {

            try {
                dataToPrint = fileReader.readMedia("/media/About_Ermon.txt");
                descriptionTextArea.setText(dataToPrint);
                
            } catch (FileNotFoundException ex) {
                descriptionTextArea.setText("About_Ermon.txt file has been "
                        + "deleted or cannot be found.");
            } catch (IOException ex) {
                descriptionTextArea.setText("About_Ermon.txt file " +
                        "cannot be accesed.");
            }
        }
        else if (comboBox.getSelectedItem().equals("Official Blog")) {
            try {
                dataToPrint = fileReader.readMedia("/media/About_Blog.txt");
                descriptionTextArea.setText(dataToPrint);
                
            } catch (FileNotFoundException ex) {
                descriptionTextArea.setText("About_Blog.txt file has been "
                        + "deleted or cannot be found.");
            } catch (IOException ex) {
                descriptionTextArea.setText("About_Blog.txt file "
                        + "cannot be accesed.");
            }
        } 
        else if (comboBox.getSelectedItem().equals("GitHub")) {
            try {
                dataToPrint = fileReader.readMedia("/media/About_Github.txt");
                descriptionTextArea.setText(dataToPrint);
                
            } catch (FileNotFoundException ex) {
                descriptionTextArea.setText("About_Github.txt file has been"
                        + "deleted or cannot be found.");
            } catch (IOException ex) {
                descriptionTextArea.setText("About_Github.txt file "
                        + "cannot be accesed.");
            }
        }
        else if (comboBox.getSelectedItem().equals("Research")) {
            try {
                dataToPrint = fileReader.readMedia("/media/About_Research.txt");
                descriptionTextArea.setText(dataToPrint);

            } catch (FileNotFoundException ex) {
                descriptionTextArea.setText("About_Research.txt file has been "
                        + "deleted or cannot be found.");
            } catch (IOException ex) {
                descriptionTextArea.setText("About_Research.txt "
                        + "cannot be accesed.");
            }
        }
        else if (comboBox.getSelectedItem().equals("Current events")) {
            dataToPrint = "PERIODICAL EXECUTION EVENTS \n====================\n";
            
            if (this.loadedPXE.isEmpty()) {
                dataToPrint = dataToPrint.concat(
                        "No Periodical Execution Events loaded.\n");
            }
            else{
                dataToPrint = dataToPrint.concat(this.printEvents(this.loadedPXE));
            }
            
            dataToPrint = dataToPrint.concat(
                    "\nSINGLE EXECUTION EVENTS \n====================\n");
            
            if (this.loadedSXE.isEmpty()) {
                dataToPrint = dataToPrint.concat(
                        "No Single Execution Events loaded.");
            }
            else{
                dataToPrint = dataToPrint.concat(this.printEvents(this.loadedSXE));
            }
            
            descriptionTextArea.setText(dataToPrint);
        }
        else {
            /* Auxiliar list of events to be printed. */
            ArrayList<src.Event> eventList = new ArrayList<>();
            
            if (comboBox.getSelectedItem().equals("Default events")) {
                /*
                 * Creates an auxiliar ConfigLoader in order to generate
                 * the default set of events, and then print them.
                 */
                ConfigLoader defaultConfig = new ConfigLoader(); 
                defaultConfig.loadDefaultEvents();
                eventList = defaultConfig.getEventList();

                dataToPrint = this.printEvents(eventList);
                descriptionTextArea.setText(dataToPrint);
            }
            else {
                /* Obtain data from the configuration file. */
                String inputFilePath = this.browseFile();
                eventList = fileReader.read(inputFilePath);

                /*
                 * If the list is not empty, the configuration file is correct,
                 * and the data can be correctly retrieved and printed.
                */
                if (!eventList.isEmpty()) { 
                    dataToPrint = this.printEvents(eventList); 
                    descriptionTextArea.setText(dataToPrint);
                }
                else { 
                    descriptionTextArea.setForeground(Color.red);
                    descriptionTextArea.setText("Invalid custom events file."); 
                }
            }   
        }
	descriptionTextArea.setCaretPosition(0);
	jScrollPane1.getVerticalScrollBar().setValue(0);     
    }                                    
  
    /**
     * Browse a file located in the local system.
     * 
     * User is allowed to browse into a file in the local system, retrieving 
     * the absolute path to it.
     * 
     * @return absolute path to the selected file.
    */
    private String browseFile () {
        String filePath = ""; 

        /* File browser (files mode only). */
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        /* Set JFileChooser text. */
        UIManager.put("FileChooser.openDialogTitleText", "Open Events file");
        UIManager.put("FileChooser.lookInLabelText", "Look In");
        UIManager.put("FileChooser.openButtonText", "Open");
        UIManager.put("FileChooser.cancelButtonText", "Cancel");
        UIManager.put("FileChooser.fileNameLabelText", "File Name");
        UIManager.put("FileChooser.filesOfTypeLabelText", "Type Files");
        UIManager.put("FileChooser.openButtonToolTipText", "Open events file");
        UIManager.put("FileChooser.cancelButtonToolTipText","Cancel");
        UIManager.put("FileChooser.fileNameHeaderText","File Name");
        UIManager.put("FileChooser.upFolderToolTipText", "Up One Level");
        UIManager.put("FileChooser.homeFolderToolTipText","Desktop");
        UIManager.put("FileChooser.newFolderToolTipText","Create New Folder");
        UIManager.put("FileChooser.listViewButtonToolTipText","List");
        UIManager.put("FileChooser.newFolderButtonText","Create New Folder");
        UIManager.put("FileChooser.renameFileButtonText", "Rename File");
        UIManager.put("FileChooser.deleteFileButtonText", "Delete File");
        UIManager.put("FileChooser.filterLabelText", "Type Files");
        UIManager.put("FileChooser.detailsViewButtonToolTipText", "Details");
        UIManager.put("FileChooser.fileSizeHeaderText","Size");
        UIManager.put("FileChooser.fileDateHeaderText", "Date Modified");
        SwingUtilities.updateComponentTreeUI(fileChooser);

        /* Return value of the browser. */
        int returnVal = fileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {    
            filePath = fileChooser.getSelectedFile().getAbsolutePath();
        }

        return filePath;
    }
   
    /**
     * Creates a string with the information of the events in a list.
     * 
     * The method iterates over a list of events, and generates a string with
     * the information of the events in a human readable way. String can be
     * printed directly in the text area of the GenericInfoWindow.
     * 
     * @param eventList list of events to be printed.
     * @return events information in text format (string).
    */
    private String printEvents( ArrayList<src.Event> eventList) {    
        String textToShow = "";

        /* 
         * Auxiliar variables used to process the event data 
         * into readable information.
        */
        int hour, min, second, duration, period;
        String fHour, fMin, fSecond;

        /* Iterates over the list of events, and process them. */
        for (Event auxEvent : eventList) {
            /* Decomposition of the duration. */
            duration = auxEvent.getDuration();
            hour = duration / 3600;
            min = (duration % 3600) / 60;
            second = (duration % 3600) % 60;

            textToShow = textToShow.concat("Title: " 
                    + auxEvent.getTitle() + "\n");
            
            textToShow = textToShow.concat("Description: " 
                    + auxEvent.getDescription() + "\n");
            
            textToShow = textToShow.concat("Duration: " + hour + " hours, " 
                    + min + " minutes, " + second + " seconds.\n");

            /* 
             * Starting hour -in case the event contains it- is printed in
             * a special format, using two digits per each time component (hour,
             * minute and second).
            */
            if (auxEvent.getStartingTime() == true) {              
                fHour = String.format("%02d", auxEvent.getStartingHour());
                fMin =  String.format("%02d", auxEvent.getStartingMin());
                fSecond =  String.format("%02d", auxEvent.getStartingSecond());

                textToShow = textToShow.concat("Execute at " + fHour
                    + ":" + fMin+ ":" + fSecond + "\n");
            }
            else {
                /* Period decomposition. */
                period = auxEvent.getPeriod();
                hour = period / 3600;
                min = (period % 3600) / 60;
                second = (period % 3600) % 60;
            
                textToShow = textToShow.concat("Execute every " 
                        + hour + " hours, " 
                        + min + " minutes and " 
                        + second + " seconds \n");
            }
            textToShow = textToShow.concat("\n\n");
        }

        return textToShow;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Show;
    private javax.swing.JComboBox comboBox;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

/*
 * Proyect:     ERMON.
 * File:        CreateWindow.java
 * Description: Implements the Creation Window, where user can create custom
 *              events, modify already existing ones, and then save them into
 *              configuration files to further use.
 * Java:        JDK 7
 * Contact:     Alberto Martin Cajal <amartin.glimpse23@gmail.com>
 * Website:     https://github.com/amcajal/ermon
 * License: GNU GPL v3.0
 * Copyright (C) 2018,2019 Alberto Martin Cajal
 *
 * This file is part of ERMON.
 *
 * ERMON is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ERMON is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ERMON.  If not, see <http://www.gnu.org/licenses/>.
*/

package gui;

/* Graphic operations. */
import java.awt.Color;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;

/* File handler. */
import java.io.File; 
import java.io.FileNotFoundException;

/* Data structures to store the data. */
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/* Modify text in JFileChooser. */
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

/* Create and save the events. */
import src.Event; 
import src.FileWorker;
import src.Flags.CreationWindowMode;

/**
 * Implements the window where custom events can be created and saved.
 * 
 * CreateWindow allos the user to create custom events or modify existing ones,
 * saving them into valid configuration files to further use.
*/
public class CreationWindow extends javax.swing.JFrame { 
    /* CLASS VARIABLES */
    
    /**
     * Map of created custom events.
     * 
     * Events are stored together with their attached ID.
     * Map is composed by:
     * - Keys: Event ID (integer).
     * - Values: Event (Event class).
    */     
    HashMap<Integer, Event> eventMap;

    /**
     * Counter of event IDs.
     * 
     * Counter of existing Events (either created or loaded from a previous 
     * saved configuration). Its value is used to assign an unique ID 
     * to each Event. Min. value of this variable is 1.
    */     
    int eventIdCounter; 
     
    /**
     * List with the ID of all available events.
     * 
     * List used to update comboBox elements. IDs are stored as Strings, 
     * in order to process them in an easier way.
    */     
    List<String> eventIdList; 

    /**
     * Establishes if event being modified is a new one or an existing one.
     * 
     * If 'true', the event being modified already exist (loaded from a valid
     * configuration file). Thus, the event data will be updated but its ID,
     * remaining the same.
    */
    boolean toModify; 
    
    /**
     * ID of an existing event being modified.
     * 
     * If an event that already exist is being modified, its ID is stored in
     * this variable, in order to preserve it from change.
    */
    int eventToModifyId; 
    
    /**
     * Mode in which the CreationWindow has been opened.
     * 
     * If mode is 'SAVE', events will be saved in a configuration file. If mode
     * is 'ADD', events will be added in execution time to the current list
     * of events being scheduled/deployed.
    */
    CreationWindowMode mode;
    
    /**
     * Array of events to be added in execution time to the Event Clock.
     * 
     * This array is bounded to the ArrayList 'newAddedEvents' of EventClock.
     * If the CreationWindow is opened in 'ADD' mode, the created events
     * are added to this list, and then loaded in the clock, being scheduled
     * and deployed normally.
     */
    ArrayList<Event> newAddedEvent;

    /* CONSTRUCTORS */

    /**
     * Default constructor.
     * 
     * Initializes ID counters, list and prepares data structures to receive
     * custom events. Establishes numerical bounds of combo boxes 
     * and other graphic elements.
    */
    public CreationWindow() {
        initComponents();    /* Autogenerated method. */

        this.eventMap = new HashMap<>();
        this.eventIdCounter = 1; 
        this.eventIdList = new ArrayList<>();
        
        /*
         * First element in the list of IDs is the string "0".
         * There is no event with ID equal to 0. Thus, this value is used 
         * to control certain invalid operations.
        */        
        this.eventIdList.add("0"); 
   
        /* Updates comboBox element to show the IDs of the available events. */
        this.eventIdBox.setModel(new DefaultComboBoxModel(eventIdList.toArray()));
        
        this.toModify = false;
        this.eventToModifyId = 0;

        /* Auxiliar string used to store new elements in the combo box. */
        String auxItem = "";
        
        /*
         * The following loop initializes the combo boxes used to specify 
         * 'Period' and 'Duration' attributes. In order to create 24-hour
         * digital format time values, the following numerical bounds are
         * set in the combo boxes:
         * - HOUR combo box: bounded to 0 (min value) to 23 (max value).
         * - MINUTE and SECONDS combo boxes: bounded to 0 (min) to 59 (max).
         * Combo boxes values are shown with two digits.
        */  
        for (int i = 0; i<=59; i++) { 
            if (i <= 9) {
                auxItem = "0" + i;
            }
            /* When the number is two digits, no transformation is needed */
            else {
                auxItem = "" + i;
            }
            
            /* HOUR combo box. */
            if (i <= 23) {
                hourPeriodBox.addItem(auxItem);
                hourDurationBox.addItem(auxItem);
            }
            
            /* MIN and SECOND comboBoxes. */
            minPeriodBox.addItem(auxItem);
            minDurationBox.addItem(auxItem);
            secondPeriodBox.addItem(auxItem);
            secondDurationBox.addItem(auxItem);          
        }
    }
  
    /**
     * Initializes CreateWindow and loads an already existing list of events 
     * in order to modify it.
     * 
     * The list of events is retrieved from a previosly saved configuration file
     * in a valid format.
     * 
     * @param customList list of custom events loaded into the window.
    */
    public CreationWindow(ArrayList<src.Event> customList) {
        this();    /* Call to default constructor. */
        
        /* Add the custom events to the map of events. ID counter is updated. */
        for (src.Event event : customList) {
            this.eventMap.put(this.eventIdCounter, event);
            this.eventIdList.add("" + this.eventIdCounter);
            this.eventIdCounter++;
        }
        
        /* Update combo box. */
        this.eventIdBox.setModel(new DefaultComboBoxModel(eventIdList.toArray()));    
        this.showCreatedEvents();    /* Print loaded events information, */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        eventsTextArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        eventTitleLabel = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        repeatEventButton = new javax.swing.JCheckBox();
        singleEventButton = new javax.swing.JCheckBox();
        addEventButton = new javax.swing.JButton();
        eventInfoLabel = new javax.swing.JLabel();
        secondDurationBox = new javax.swing.JComboBox();
        minDurationBox = new javax.swing.JComboBox();
        hourDurationBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        secondPeriodBox = new javax.swing.JComboBox();
        minPeriodBox = new javax.swing.JComboBox();
        hourPeriodBox = new javax.swing.JComboBox();
        singleExecutionLabel = new javax.swing.JLabel();
        deleteEventButton = new javax.swing.JButton();
        modifyEventButton = new javax.swing.JButton();
        eventIdBox = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        secondEventInfoLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        resetAllButton = new javax.swing.JButton();
        saveLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Event creation window");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("EVENT CREATION WINDOW"));

        eventsTextArea.setColumns(20);
        eventsTextArea.setLineWrap(true);
        eventsTextArea.setRows(5);
        jScrollPane1.setViewportView(eventsTextArea);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setText("Event Title:");

        jLabel10.setText("Duration:");

        jLabel14.setText("Description:");

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setRows(5);
        jScrollPane2.setViewportView(descriptionTextArea);

        repeatEventButton.setText("Repeat every:");
        repeatEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repeatEventButtonActionPerformed(evt);
            }
        });

        singleEventButton.setText("Single execution at:");
        singleEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleEventButtonActionPerformed(evt);
            }
        });

        addEventButton.setText("Add Event");
        addEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEventButtonActionPerformed(evt);
            }
        });

        eventInfoLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel2.setText("HOUR");

        jLabel3.setText("MIN ");

        jLabel4.setText("SEC ");

        jLabel5.setText("HOUR");

        jLabel6.setText("MIN ");

        jLabel7.setText("SEC ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                    .addComponent(eventInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(singleExecutionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(hourDurationBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hourPeriodBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(minDurationBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                            .addComponent(minPeriodBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(secondDurationBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(secondPeriodBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(repeatEventButton)
                                .addGap(18, 18, 18)
                                .addComponent(singleEventButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eventTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 26, Short.MAX_VALUE))
                    .addComponent(addEventButton, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(eventTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(repeatEventButton)
                    .addComponent(singleEventButton))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(secondPeriodBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minPeriodBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hourPeriodBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(singleExecutionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)))
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(secondDurationBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minDurationBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hourDurationBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(addEventButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        deleteEventButton.setText("Delete Event");
        deleteEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEventButtonActionPerformed(evt);
            }
        });

        modifyEventButton.setText("Modify Event");
        modifyEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyEventButtonActionPerformed(evt);
            }
        });

        eventIdBox.setBorder(null);

        jLabel8.setText("Event ID");

        secondEventInfoLabel.setText("To edit or delete an event: select its ID,  and press the option then.");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(eventIdBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 68, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(modifyEventButton)
                                .addGap(18, 18, 18)
                                .addComponent(deleteEventButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(secondEventInfoLabel)
                        .addGap(32, 32, 32))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(secondEventInfoLabel)
                        .addGap(15, 15, 15)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(eventIdBox, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteEventButton)
                            .addComponent(modifyEventButton))
                        .addGap(13, 13, 13)))
                .addContainerGap(17, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        resetAllButton.setText("Reset All");
        resetAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllButtonActionPerformed(evt);
            }
        });

        saveLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(saveLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetAllButton)
                        .addGap(40, 40, 40)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resetAllButton))
                    .addComponent(saveLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* METHODS */
    
    /**
     * Executes operations controled by 'addEvent' button.
     *
     * Retrieves from the graphical elements -combo boxes, text areas- the
     * introduced data and, creates a new event with it and add it to the map.
     *
     * @param evt the pressing of the button.
    */
    private void addEventButtonActionPerformed(java.awt.event.ActionEvent evt) {    /* GEN-FIRST:event_addEventButtonActionPerformed.*/
        /*
         * The following variables are used to retrieve the needed data
         * to create a new event. Each variable corresponds to an attribute.
         * Letter p as prefix means 'period', while d letter means 'duration'.
        */
        int pHour, pMin, pSecond, dHour, dMin, dSecond, period, duration;
        String title, description;
        boolean startingTime = false;

        /* 
         * Checks that required fields containts correct data.  If not,
         * give visual feedback about the error.
        */
        if (eventTitleLabel.getText().replace(" ", "").isEmpty()) {
            eventInfoLabel.setForeground(Color.red);
            eventInfoLabel.setText("Event title is empty.");
        } 
        else if ((!singleEventButton.isSelected())
                &(!repeatEventButton.isSelected())) {
            eventInfoLabel.setForeground(Color.red);
            eventInfoLabel.setText("Choose \"Single execution at\" "
                    + "or \"Repeat every\".");
        }
        else {    /* Additional checkings. */
            /* Parse combo boxes data (String to integer). */
            pHour = Integer.parseInt(hourPeriodBox
                    .getSelectedItem().toString());
            pMin = Integer.parseInt(minPeriodBox
                    .getSelectedItem().toString());
            pSecond = Integer.parseInt(secondPeriodBox
                    .getSelectedItem().toString());
      
            dHour = Integer.parseInt(hourDurationBox
                    .getSelectedItem().toString());
            dMin = Integer.parseInt(minDurationBox
                    .getSelectedItem().toString());
            dSecond = Integer.parseInt(secondDurationBox
                    .getSelectedItem().toString());
        
            /*
             * If 'Single Execution at' is selected,
             * 'period' values must be interpreted as 'Hour of the day'.
             */
            if (singleEventButton.isSelected()) {
                /*
                 * If the event is executed at a specific hour of the day,
                 * the period automatically is 24 hours (86400 seconds).
                */
                period = 86400;
                startingTime = true; 
            }
            else {
                period = (pHour * 3600) + (pMin * 60) + pSecond;
            }

            duration = (dHour * 3600) + (dMin * 60) + dSecond;

            if ((duration == 0) | (period == 0)){
                eventInfoLabel.setForeground(Color.red);
                eventInfoLabel.setText("Invalid Duration or Period. "
                        + "Min value: 1 sec.");
            }
            else{    /* All required fields are correct. */
                title = eventTitleLabel.getText();
           
                /*
                 * Events are stored in text files using a specific format
                 * that involves hash "#" characters.
                 * Thus, the description can not contain hash characters,
                 * in order to avoid problems when loading events from
                 * these files.
                 * New line characters are not allowed, so they are replaced
                 * too with a simple space.
                */
                description = descriptionTextArea.getText()
                        .replace("#", "").replace("\n", " ");

                eventInfoLabel.setForeground(Color.blue);

                /*
                 * If 'toModify' is true, means that this method wont add
                 * a new event.
                 * Instead, the method has modified an existing once, and so,
                 * the ID of the Event shall be kept.
                */
                if (toModify == true) {
                    /* Restore the event. */
                    this.eventMap.put(this.eventToModifyId,
                        new Event(title, description, period, duration,
                        startingTime, pHour, pMin, pSecond));

                    /* Restore the ID in the combo box. */
                    eventIdList.add(this.eventToModifyId + "");

                    toModify = false; 
                    eventInfoLabel.setText("Event modified: event with ID "
                            + this.eventToModifyId);
                }         
                else {    /* Adding a new event. */
                    /* Add the event to the Map, with the current highest ID. */
                    this.eventMap.put(this.eventIdCounter,
                        new Event(title, description, period, duration,
                        startingTime, pHour, pMin, pSecond));

                    eventIdList.add(this.eventIdCounter + "");
                    eventInfoLabel.setText("Event added: event with ID "
                            + this.eventIdCounter);
                    this.eventIdCounter ++;
                }

                /* Update combo box id elements list. */
                eventIdBox.setModel(
                        new DefaultComboBoxModel(eventIdList.toArray()));

                /* Update GUI and prepare for the next operation. */
                this.cleanElements(); 
                this.showCreatedEvents(); 
            }
        }
    }                                              

    /**
     * Executes operations controled by 'repeatEvent' button.
     * 
     * Establishes that the event will execute several times a day.
     * 'repeatEvent' is set to True.
     * 'singleEvent' is set to False. Hide its label.
     * 
     * @param evt the pressing of the button.
    */
    private void repeatEventButtonActionPerformed(java.awt.event.ActionEvent evt) {    /* GEN-FIRST:event_repeatEventButtonActionPerformed.*/
        singleEventButton.setSelected(false);
        singleExecutionLabel.setText("");
    }

    /**
     * Executes operations controled by 'singleEvent' button.
     *
     * Establishes that the event executes just at a certain hour of the day.
     * 'singleEvent' is set to True.
     * 'repeatEvent' is set to False. Hide its label.
     *
     * @param evt the pressing of the button.
    */
    private void singleEventButtonActionPerformed(java.awt.event.ActionEvent evt) {    /* GEN-FIRST:event_singleEventButtonActionPerformed.*/
        repeatEventButton.setSelected(false);
        singleExecutionLabel.setText("Hour of the day");
    }                                                 

    /**
     * Executes operations controled by 'deleteEvent' button.
     *
     * Deletes event selected by the user, removing it from the map and updating
     * ID numbers.
     *
     * @param evt the pressing of the button.
    */
    private void deleteEventButtonActionPerformed(java.awt.event.ActionEvent evt) {    /* GEN-FIRST:event_deleteEventButtonActionPerformed.*/

        String eventToDeleteIndex = eventIdBox.getSelectedItem().toString();
        
        if (eventToDeleteIndex.equals("0")) {
                eventInfoLabel.setForeground(Color.red);
                eventInfoLabel.setText("Invalid event ID.");
        }
        else {
            this.removeEvent(Integer.parseInt(eventToDeleteIndex));

            /* Visual feedback. */
            eventInfoLabel.setForeground(Color.blue);
            eventInfoLabel.setText("Event deleted: event with ID "
                    + eventToDeleteIndex);

            /* Update main text area with the remain events. */
            this.showCreatedEvents();
        }
    }

    /**
     * Removes a specific event.
     * 
     * Event selected is removed from the map. Also, its ID is deleted from
     * the list of IDs.
     * 
     * @param eventToDelete ID of the event to be removed.
    */
    private void removeEvent(int eventToDelete) {
        this.eventMap.remove(eventToDelete);
        eventIdList.remove(eventToDelete);

        /* Updates the combo box. */
        eventIdBox.setModel(new DefaultComboBoxModel(eventIdList.toArray()));    
    }

    /**
     * Executes operations controled by 'modifyEvent' button.
     *
     * Loads into the graphical events the data of the selected event, making
     * the user able to modify it without entering manually its attributes.
     *
     * @param evt the pressing of the button.
    */
    private void modifyEventButtonActionPerformed(java.awt.event.ActionEvent evt) {    /* GEN-FIRST:event_modifyEventButtonActionPerformed.*/

        int eventToModifyIndex = Integer
                .parseInt(eventIdBox.getSelectedItem().toString());
        
        if (eventToModifyIndex == 0) {
            eventInfoLabel.setForeground(Color.red);
            eventInfoLabel.setText("Invalid event ID.");
        }
        else {
            /*
             * Auxiliar variables needed to transform the event data into
             * readable information.
            */
            int pHour, pMin, pSecond, dHour, dMin, dSecond, period, duration;
           
            /* Auxiliar copy of the event to be modified. */
            Event auxEvent = this.eventMap.get(eventToModifyIndex);

            /* Load event information into window's elements. */
            eventTitleLabel.setText(auxEvent.getTitle()); 
            descriptionTextArea.setText(auxEvent.getDescription());
            duration = auxEvent.getDuration();

            if (auxEvent.getStartingTime() == true) {
                singleEventButton.setSelected(true);

                hourPeriodBox.setSelectedIndex(auxEvent.getStartingHour());
                minPeriodBox.setSelectedIndex(auxEvent.getStartingMin());
                secondPeriodBox.setSelectedIndex(auxEvent.getStartingSecond());
            }
            else { 
                repeatEventButton.setSelected(true);

                period = auxEvent.getPeriod();
             
                /* Decomposition of seconds into hours, minutes and seconds. */
                pHour = period / 3600;
                pMin = (period % 3600) / 60;
                pSecond = (period % 3600) % 60;

                hourPeriodBox.setSelectedIndex(pHour);
                minPeriodBox.setSelectedIndex(pMin);
                secondPeriodBox.setSelectedIndex(pSecond);
            }

            /* Duration decomposition in hours, minutes and seconds. */
            dHour = duration / 3600;
            dMin = (duration % 3600) / 60;
            dSecond = (duration % 3600) % 60;

            hourDurationBox.setSelectedIndex(dHour);
            minDurationBox.setSelectedIndex(dMin);
            secondDurationBox.setSelectedIndex(dSecond);

            eventInfoLabel.setForeground(Color.blue);
            eventInfoLabel.setText("Event details loaded: event wit ID "
                    + eventToModifyIndex);

            /*
             * When a event is loaded, it is removed from the maps and lists
             * but its ID is maintained, so at the next adding operation,
             * it will be restored.
            */
            this.removeEvent(eventToModifyIndex);

            /* Triggers the correct operation at next adding.*/
            this.toModify = true;

            /* Save the ID of the event for further operations. */
            this.eventToModifyId = eventToModifyIndex;

            /* Update main text area with the remain events.*/
            this.showCreatedEvents();    
        }
    }                                                 

    /**
     * Executes operations controled by 'resetAll' button.
     *
     * Restores all variables to their initial values.
     *
     * @param evt the pressing of the button.
    */
    private void resetAllButtonActionPerformed(java.awt.event.ActionEvent evt) {    /* GEN-FIRST:event_resetAllButtonActionPerformed.*/
        this.resetAll();
        
        /* Visual feedback. */
        eventInfoLabel.setText("");
        eventsTextArea.setText("");
        saveLabel.setForeground(Color.blue);
        saveLabel.setText("All data has been reset.");
    } 
    
    /**
     * Restores logic elements o its initial status.
     * 
     * Maps, list and other elements are clear from data and left empty.
    */
    private void resetAll() {
        this.eventMap.clear();
        this.eventIdCounter = 1; 
        this.eventIdList.clear();
        this.eventIdList.add("0"); 
        this.eventIdBox
                .setModel(new DefaultComboBoxModel(eventIdList.toArray()));
        this.toModify = false; 
        this.eventToModifyId = 0;
    }

    /**
     * Executes operations controled by 'saveConfig' button.
     *
     * Performs differents operations depends on the mode of the window:
     * - If mode is 'SAVE', saves created/modified events in a file.
     * - If mode is 'ADD', events are added to Event Clock during execution time.
     *
     * @param evt the pressing of the button.
    */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {    /* GEN-FIRST:event_saveConfigButtonActionPerformed.*/

        if (this.eventIdCounter == 1) {
            saveLabel.setForeground(Color.red);
            saveLabel.setText("No events to save. Create at least one event.");
        }
        else {
            if (this.mode == CreationWindowMode.SAVE) {
                this.saveEventsInFile();
            }
            else { /* CreationWindowMode.ADD. */
                this.addEventToExecution();
            }
        }
    }
    
    /**
     * Add events to eventClock, being added in execution time.
     * 
     * Events added are loaded in EventClock in execution time, due to
     * the conection between the internal list and the EventClock list
     * (reference are kept between the arrays).
     */
    private void addEventToExecution() {
        Event auxEvent; /* Auxiliar copy of an Event. */
        
        for (Map.Entry pair : eventMap.entrySet()) {
            auxEvent = (Event) pair.getValue();
            this.newAddedEvent.add(auxEvent);
        }
        
        /* 'newAddedEvent' list is actually cleared in EventClock. */
        this.resetAll();
        this.cleanElements();
        eventInfoLabel.setText("");
        eventsTextArea.setText("");
        
        /* Visual feedback. */
        saveLabel.setForeground(Color.blue);
        saveLabel.setText("Events have been added to the Event Clock"
                + " to be scheduled in the current execution.");
    }
    
    /**
     * Saves the created/modified events in a configuration file.
     * 
     * At least one event shall be created in order to save it into a file.
    */
    private void saveEventsInFile() {

        /* To write results file. */
        FileWorker fileWriter = new FileWorker();
        File outputFile;
        String outputFilePath= "";    /* Absolute path to browsed file.*/

        /* File chooser to browser the output file. */
        JFileChooser fileChooser = new JFileChooser();
        
        /* Set text in buttons. */
        UIManager.put("FileChooser.openDialogTitleText", "Save Events");
        UIManager.put("FileChooser.lookInLabelText", "Look In");
        UIManager.put("FileChooser.openButtonText", "Save");
        UIManager.put("FileChooser.cancelButtonText", "Cancel");
        UIManager.put("FileChooser.fileNameLabelText", "File Name");
        UIManager.put("FileChooser.filesOfTypeLabelText", "Type Files");
        UIManager.put("FileChooser.openButtonToolTipText", "Saves Events in file");
        UIManager.put("FileChooser.cancelButtonToolTipText","Cancel");
        UIManager.put("FileChooser.fileNameHeaderText","File Name");
        UIManager.put("FileChooser.upFolderToolTipText", "Up One Level");
        UIManager.put("FileChooser.homeFolderToolTipText","Desktop");
        UIManager.put("FileChooser.newFolderToolTipText","Create New Folder");
        UIManager.put("FileChooser.listViewButtonToolTipText","List");
        UIManager.put("FileChooser.newFolderButtonText","Create New Folder");
        UIManager.put("FileChooser.renameFileButtonText", "Rename File");
        UIManager.put("FileChooser.deleteFileButtonText", "Delete File");
        UIManager.put("FileChooser.filterLabelText", "Type Files");
        UIManager.put("FileChooser.detailsViewButtonToolTipText", "Details");
        UIManager.put("FileChooser.fileSizeHeaderText","Size");
        UIManager.put("FileChooser.fileDateHeaderText", "Date Modified");
        SwingUtilities.updateComponentTreeUI(fileChooser);
        
        fileChooser.setFileSelectionMode(JFileChooser
                .FILES_AND_DIRECTORIES);

        /* Return value of the operation .*/
        int returnVal = fileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {          
            outputFilePath = fileChooser.getSelectedFile()
                    .getAbsolutePath();
        }

         /* Creates the file in the browsed path with the selected name. */
        outputFile = new File(outputFilePath);   

        if (outputFile.isDirectory()){
            eventInfoLabel.setForeground(Color.red);
            eventInfoLabel.setText("Invalid output file.");
        }
        else {
            try {
                fileWriter.write(this.eventMap, outputFile);

                saveLabel.setForeground(Color.blue);
                saveLabel.setText("Configuration saved in " 
                        + outputFilePath);

            } catch (FileNotFoundException ex) {
                saveLabel.setForeground(Color.red);
                saveLabel.setText("Couldn't save in the file.");
            }
        }
    }

    /**
     * Prints information of created events.
     * 
     * Method iterates over all created events and prints its information in
     * the main text area of the window.
    */
    private void showCreatedEvents() {

        eventsTextArea.setText("");   
        String textToShow = "";
        
        /* Auxiliar variable to retrieve each event from the event Map. */
        Event auxEvent;    

        /* Auxiliar variables used to process the event data. */
        int hour, min, second, duration;
        String fHour, fMin, fSecond;

        for (Map.Entry pair : this.eventMap.entrySet()) {
            textToShow = textToShow.concat("Event with ID " 
                    + pair.getKey() + "\n-------------------\n");
            
            /* Obtain the event (that is, the VALUE of the current Map entry).*/
            auxEvent = (Event) pair.getValue();
            
            /* Retrieve event data. */
            duration = auxEvent.getDuration(); 

            /* Decompose duration into hours, minutes and seconds. */
            hour = duration / 3600;
            min = (duration % 3600) / 60;
            second = (duration % 3600) % 60;

            textToShow = textToShow.concat("Title: " 
                    + auxEvent.getTitle() + "\n");
            
            textToShow = textToShow.concat("Description: " 
                    + auxEvent.getDescription() + "\n");
            
            textToShow = textToShow.concat("Duration: " + hour + " hours, " 
                    + min + " minutes, " + second + " seconds.\n"); 

            if (auxEvent.getStartingTime() == true) { 
                /*
                 * Obtain the hour, minute and second of the execution time, 
                 * and parse it to two-digit strings.
                */                
                fHour = String.format("%02d", auxEvent.getStartingHour());
                fMin =  String.format("%02d", auxEvent.getStartingMin());
                fSecond =  String.format("%02d", auxEvent.getStartingSecond());

                textToShow = textToShow.concat("Execute at " + fHour
                    + ":" + fMin+ ":" + fSecond + "\n");
            }
            else {
                /* Decompose period into hours, minutes and seconds. */
                duration = auxEvent.getPeriod();
                
                hour = duration / 3600;
                min = (duration % 3600) / 60;
                second = (duration % 3600) % 60;
                
                textToShow = textToShow.concat("Execute every " 
                        + hour + " hours, " 
                        + min + " minutes and " 
                        + second + " seconds \n");
            }
            textToShow = textToShow.concat("\n\n"); 
        }
        eventsTextArea.setText(textToShow);
    }
    
    /**
     * Cleans graphic elements from previosly selected or introduced data.
     * 
     * Restores graphic elements to its initial state.
    */
    private void cleanElements() {
        eventTitleLabel.setText("");
        singleExecutionLabel.setText("");
        
        repeatEventButton.setSelected(false);
        singleEventButton.setSelected(false);
  
        hourPeriodBox.setSelectedIndex(0);
        minPeriodBox.setSelectedIndex(0);
        secondPeriodBox.setSelectedIndex(0);
        
        hourDurationBox.setSelectedIndex(0);
        minDurationBox.setSelectedIndex(0);
        secondDurationBox.setSelectedIndex(0);
        
        descriptionTextArea.setText(""); 
    }
    
    /**
     * Establishes the behaviour of the CreationWindow.
     * 
     * Depends on the mode loaded, press 'Save' buttons will execute different
     * set of operations:
     * - If mode is 'SAVE', events will be stored in a configuration file for
     * further use.
     * - If mode is 'ADD', CreationWindow has been opened while events are
     * running and thus, events created will be added to the list of events
     * being scheduled/deployed.
     * 
     * @param mode mode to be set in the CreationWindow, either SAVE or ADD.
    */
    public void setMode(CreationWindowMode mode) {
        this.mode = mode;
    }
    
    /**
     * Bounds an array of events to the internal array.
     * 
     * This conects the array list 'newAddedEvents' of EventClock with the
     * 'newAddedEvents' of the CreationWindow. Then, events added to one list
     * will appear in both (reference is kept).
     * 
     * @param eventList list of events to be conected to.
     */
    public void setNewAddedEvents(ArrayList<Event> eventList) {
        this.newAddedEvent = eventList;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEventButton;
    private javax.swing.JButton deleteEventButton;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JComboBox eventIdBox;
    private javax.swing.JLabel eventInfoLabel;
    private javax.swing.JTextField eventTitleLabel;
    private javax.swing.JTextArea eventsTextArea;
    private javax.swing.JComboBox hourDurationBox;
    private javax.swing.JComboBox hourPeriodBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox minDurationBox;
    private javax.swing.JComboBox minPeriodBox;
    private javax.swing.JButton modifyEventButton;
    private javax.swing.JCheckBox repeatEventButton;
    private javax.swing.JButton resetAllButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel saveLabel;
    private javax.swing.JComboBox secondDurationBox;
    private javax.swing.JLabel secondEventInfoLabel;
    private javax.swing.JComboBox secondPeriodBox;
    private javax.swing.JCheckBox singleEventButton;
    private javax.swing.JLabel singleExecutionLabel;
    // End of variables declaration//GEN-END:variables

}
